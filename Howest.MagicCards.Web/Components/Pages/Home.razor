@page "/"
@using Howest.MagicCards.Shared.DTO
@using Howest.MagicCards.Shared.ViewModels
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Options

<div class="app">
    <div class="cards">
        <aside class="filter">
            <EditForm Model="@_cardFilterViewModel" OnValidSubmit="@ShowAllCards" FormName="CardFilterForm" class="form">
                <div class="form-group">
                    <label for="card-name">Card Name:</label>
                    <InputText id="card-name" @bind-Value="@_cardFilterViewModel.CardName" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <label for="card-text">Card Text:</label>
                    <InputText id="card-text" @bind-Value="@_cardFilterViewModel.CardText" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <label for="card-artist">Artist Name:</label>
                    <InputText id="card-artist" @bind-Value="@_cardFilterViewModel.ArtistName" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <label for="card-set">Set code:</label>
                    <InputText id="card-set" @bind-Value="@_cardFilterViewModel.SetCode" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <label for="card-rarity">Rarity:</label>
                    <InputSelect id="card-rarity" @bind-Value="@_cardFilterViewModel.RarityCode" class="form-control">
                        <option value="">Not Selected</option>
                        @if (_rarties is not null)
                        {
                            foreach (RarirtyReadDTO rarirty in _rarties)
                            {
                                <option value="@rarirty.RarityName">@rarirty.RarityName</option>
                            }
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-info">Filter</button>
            </EditForm>
        </aside>


        <article class="cards-article">
            <h2>Cards</h2>
            @if (_cards == null)
            {
                <p>No Cards found</p>
            }
            else
            {
                <p>Amount of cards shown: @_cards.Count()</p> 
                <ul class="cardList">
                    @foreach (CardReadDTO card in _cards)
                    {
                        <li>
                            <h3>@card.Name</h3>
                            @if (String.IsNullOrEmpty(card.ImageUrl))
                            {
                                <p>No Image found</p>
                            }
                            else
                            {
                                <img src="@card.ImageUrl" alt="Card Image" />
                            }

                            <div class="cardDetail" style="display: @(cardDetailVisibility.ContainsKey(long.Parse(card.Id)) && cardDetailVisibility[long.Parse(card.Id)] ? "block" : "none")">
                                <p>@card.Text</p>
                                <div class="rarity-section">
                                    <h4>Rarity:</h4>
                                    <p>@card.Rarity</p>
                                </div>
                                <div class="artist-section">
                                    <h4>Artist:</h4>
                                    <p>@card.Artist</p>
                                </div>
                                <div class="set-section">
                                    <h4>Set:</h4>
                                    <p>@card.Set</p>
                                </div>
                                <button class="btn btn-info" @onclick="@(() => ShowCardDetailsFromApi(long.Parse(card.Id)))">Show more Details</button>
                                <button class="btn btn-info" @onclick="@(() => HideCardDetails(long.Parse(card.Id)))">Hide Details</button>

                                <div class="cardDetailFromApi" style="display: @(cardDetailFromApiVisibility.ContainsKey(long.Parse(card.Id)) && cardDetailFromApiVisibility[long.Parse(card.Id)] ? "block" : "none")">

                                    @if (_cardDetailsFromApi.FirstOrDefault(c => c.Id == long.Parse(card.Id)) is not null)
                                    {
                                     <div>
                                            <p> artist: @_cardDetailsFromApi.FirstOrDefault(c => c.Id == long.Parse(card.Id)).ArtistName</p>
                                            <p> created at: @_cardDetailsFromApi.FirstOrDefault(c => c.Id == long.Parse(card.Id)).CreatedAt</p>

                                      </div> 
                                    } 

                                </div>
                            </div>

                            <!-- Button for showing details -->
                            <button class="btn btn-info" @onclick="@(() => ShowCardDetails(long.Parse(card.Id)))">Show Details</button>
                            <!-- Button for adding to current deck -->
                            <button class="btn btn-primary" @onclick="@(() => AddCardToDeck(card))">Add to Current Deck</button>
                        </li>
                    }
                    }
                </ul>
            }
        </article>
    </div>



<article class="decks">
    <article class="all-decks">
        <h3>all decks</h3>
        <ul>
            @if (_allDecks is not null)
            {
                foreach (DeckReadDTO deck in _allDecks)
                {
                    <li class="all-deck">
                            <p>
                                @deck.DeckName 
                                <button class="btn btn-info" @onclick="@(() => RemoveDeck(deck.Id))">Remove</button>
                            </p>
                    </li>
                }
            }
        </ul>
    </article>
    <article class="newDeck">
        <h3>create new deck:</h3>
            <EditForm Model="@_deckViewModel" OnValidSubmit="HandleAddDeckSubmit" FormName="DeckForm" class="deck-builder">
                <label for="deck-name">Deck Name:</label>
                <InputText id="deck-name" @bind-Value="_deckViewModel!.DeckName" class="form-control"></InputText>
                <button type="submit" class="btn btn-info">Save</button>
            </EditForm>
    </article>

    <article>
        <h3>current deck</h3>
            <ul class="deckCards">
                @if (_cardsInDeck is not null)
                {
                    foreach (DeckCardViewModel deckCard in _cardsInDeck)
                    {
                        <li class="deck-item" >
                            <p class="card-name">name: @deckCard.CardName</p>
                            <p class="counter">amount: @deckCard.Amount</p>
                            <button @onclick="@(() =>  AddCardIdToDeck( deckCard.CardId))">+</button>
                            <button @onclick="@(() =>  RemoveCard(deckCard))">-</button>
                        </li>
                    }
                }
            </ul>
    </article>
        
</article>
</div>