<article  class="cards-article">
    <h2>Cards</h2>
    @if (_cards == null)
    {
        <p>No Cards found</p>
    }
    else
    {
        <p>Amount of cards shown: @_cards.Count()</p>
        <ul class="cardList">
            @foreach (CardReadDTO card in _cards)
            {
                <li>
                    <h3>@card.Name</h3>
                    @if (String.IsNullOrEmpty(card.ImageUrl))
                    {
                        <p>No Image found</p>
                    }
                    else
                    {
                        <img src="@card.ImageUrl" alt="Card Image" />
                    }

                    <div class="cardDetail" style="display: @(cardDetailVisibility.ContainsKey(long.Parse(card.Id)) && cardDetailVisibility[long.Parse(card.Id)] ? "block" : "none")">
                        <p>@card.Text</p>
                        <div class="rarity-section">
                            <h4>Rarity:</h4>
                            <p>@card.Rarity</p>
                        </div>
                        <div class="artist-section">
                            <h4>Artist:</h4>
                            <p>@card.Artist</p>
                        </div>
                        <div class="set-section">
                            <h4>Set:</h4>
                            <p>@card.Set</p>
                        </div>
                        <button class="btn btn-info" @onclick="@(() => ShowCardDetailsFromApi(long.Parse(card.Id)))">Show more Details</button>
                        <button class="btn btn-info" @onclick="@(() => HideCardDetails(long.Parse(card.Id)))">Hide Details</button>

                        <div class="cardDetailFromApi" style="display: @(cardDetailFromApiVisibility.ContainsKey(long.Parse(card.Id)) && cardDetailFromApiVisibility[long.Parse(card.Id)] ? "block" : "none")">

                            @if (_cardDetailsFromApi.FirstOrDefault(c => c.Id == long.Parse(card.Id)) is not null)
                            {
                                <div>
                                    <p> artist: @_cardDetailsFromApi.FirstOrDefault(c => c.Id == long.Parse(card.Id)).ArtistName</p>
                                    <p> created at: @_cardDetailsFromApi.FirstOrDefault(c => c.Id == long.Parse(card.Id)).CreatedAt</p>

                                </div>
                            }

                        </div>
                    </div>

                    <!-- Button for showing details -->
                    <button class="btn btn-info" @onclick="@(() => ShowCardDetails(long.Parse(card.Id)))">Show Details</button>
                    <!-- Button for adding to current deck -->
                    <button class="btn btn-primary" @onclick="@(() => AddCardToDeckCallback.InvokeAsync(card))">Add to Current Deck</button>
                </li>
            }
            }
        </ul>
    }
</article>


